{"version":3,"file":"index3.js","sources":["src/jest-runner-typecheck/index.ts"],"sourcesContent":["/// <reference types=\"node\" />\nimport * as ts from \"typescript\";\nimport * as fs from \"fs\";\nimport {\n  codeFrameColumns as codeFrame,\n  SourceLocation\n} from \"@babel/code-frame\";\nimport { fail, pass } from \"create-jest-runner\";\n\nclass CancelRun extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"CancelRun\";\n  }\n}\n\nconst appendCodeFrame = ({\n  filePath,\n  errorMessage,\n  location\n}: {\n  filePath: string;\n  errorMessage: string;\n  location?: SourceLocation;\n}) => {\n  if (typeof location === \"undefined\") {\n    return errorMessage;\n  }\n  const rawLines = fs.readFileSync(filePath, \"utf8\");\n  return `${errorMessage}\\n${codeFrame(rawLines, location, {\n    highlightCode: true\n  })}`;\n};\n\nconst files: ts.MapLike<{\n  version: number;\n  mtime: number;\n  lastResult?: unknown;\n}> = {};\n\n// Create the language service host to allow the LS to communicate with the host\nconst servicesHost: ts.LanguageServiceHost = {\n  getScriptFileNames: () => Object.keys(files),\n  getScriptVersion: fileName =>\n    files[fileName] && files[fileName].version.toString(),\n  getScriptSnapshot: fileName => {\n    if (!fs.existsSync(fileName)) {\n      return undefined;\n    }\n\n    return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());\n  },\n  getCurrentDirectory: () => process.cwd(),\n  getCompilationSettings: () => ({\n    strict: true,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n    target: ts.ScriptTarget.ES2017,\n    forceConsistentCasingInFileNames: true,\n    isolatedModules: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    noEmit: true,\n    allowSyntheticDefaultImports: true,\n    jsx: ts.JsxEmit.React,\n    skipLibCheck: true\n  }),\n  getDefaultLibFileName: options => ts.getDefaultLibFilePath(options),\n  fileExists: ts.sys.fileExists,\n  readFile: ts.sys.readFile,\n  readDirectory: ts.sys.readDirectory\n};\n\n// Create the language service files\nconst services = ts.createLanguageService(\n  servicesHost,\n  ts.createDocumentRegistry()\n);\n\nmodule.exports = class TypecheckRunner {\n  constructor() {}\n\n  async runTests(\n    tests: { path: string }[],\n    watcher: { isInterrupted(): boolean },\n    onStart: (test: unknown) => Promise<unknown>,\n    onResult: (test: unknown, result: unknown) => Promise<unknown>\n  ) {\n    if (watcher.isInterrupted()) {\n      throw new CancelRun();\n    }\n\n    for (const test of tests) {\n      await onStart(test);\n      await onResult(test, this.testFile(test.path));\n    }\n  }\n\n  getErrors(fileName: string) {\n    return services\n      .getSemanticDiagnostics(fileName)\n      .concat(services.getSyntacticDiagnostics(fileName));\n  }\n\n  returnResult(testPath: string, result: unknown) {\n    files[testPath].lastResult = result;\n    return result;\n  }\n\n  testFile(testPath: string) {\n    const start = Date.now();\n\n    const baseObj = {\n      start,\n      title: \"tsc\",\n      test: { path: testPath }\n    };\n\n    const { mtime } = fs.statSync(testPath);\n    if (!files[testPath]) {\n      files[testPath] = { version: 0, mtime: 0 };\n    }\n\n    if (+mtime <= +files[testPath].mtime) {\n      files[testPath].mtime = +mtime;\n      return files[testPath].lastResult;\n    }\n\n    files[testPath].version++;\n    files[testPath].mtime = +mtime;\n\n    const allDiagnostics = this.getErrors(testPath);\n\n    const errors = allDiagnostics\n      .map(diagnostic => {\n        if (diagnostic.file) {\n          const {\n            line: lineStart,\n            character: characterStart\n          } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n          const {\n            line: lineEnd,\n            character: characterEnd\n          } = diagnostic.file.getLineAndCharacterOfPosition(\n            diagnostic.start! + diagnostic.length!\n          );\n\n          const location = {\n            start: {\n              line: lineStart + 1,\n              column: characterStart + 1\n            },\n            end: {\n              line: lineEnd + 1,\n              column: characterEnd + 1\n            }\n          };\n\n          const message = ts.flattenDiagnosticMessageText(\n            diagnostic.messageText,\n            \"\\n\"\n          );\n\n          return {\n            location,\n            errorMessage: message,\n            filePath: diagnostic.file.fileName\n          };\n        } else {\n          return {\n            errorMessage: `${ts.flattenDiagnosticMessageText(\n              diagnostic.messageText,\n              \"\\n\"\n            )}`,\n            filePath: testPath\n          };\n        }\n      })\n      .map(appendCodeFrame);\n\n    const end = Date.now();\n\n    if (errors.length === 0) {\n      return this.returnResult(testPath, pass({ ...baseObj, end }));\n    }\n\n    return this.returnResult(\n      testPath,\n      fail({\n        ...baseObj,\n        errorMessage: errors.join(\"\\n\\n\"),\n        end\n      })\n    );\n  }\n};\n"],"names":["CancelRun","Error","constructor","message","name","appendCodeFrame","filePath","errorMessage","location","rawLines","fs","codeFrame","highlightCode","files","servicesHost","getScriptFileNames","Object","keys","getScriptVersion","fileName","version","toString","getScriptSnapshot","undefined","ts","fromString","getCurrentDirectory","process","cwd","getCompilationSettings","strict","moduleResolution","NodeJs","target","ES2017","forceConsistentCasingInFileNames","isolatedModules","noUnusedLocals","noUnusedParameters","noEmit","allowSyntheticDefaultImports","jsx","React","skipLibCheck","getDefaultLibFileName","options","fileExists","readFile","readDirectory","services","module","exports","TypecheckRunner","runTests","tests","watcher","onStart","onResult","isInterrupted","test","testFile","path","getErrors","getSemanticDiagnostics","concat","getSyntacticDiagnostics","returnResult","testPath","result","lastResult","start","Date","now","baseObj","title","mtime","allDiagnostics","errors","map","diagnostic","file","line","lineStart","character","characterStart","getLineAndCharacterOfPosition","lineEnd","characterEnd","length","column","end","messageText","pass","fail","join"],"mappings":"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"}
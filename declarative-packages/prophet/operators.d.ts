import { Any, ExpressionEvaluationResult } from "./types";
import { TExecutionContext } from "./execution-context/ExecutionContext";
import { ESTree } from "cherow";
export declare type BinaryOperatorResolver = (left: Any, right: Any) => Any;
export declare type UnaryOperatorResolver = (arg: Any, execContext: TExecutionContext) => [Any, TExecutionContext];
export declare type LogicalOperatorResolver = (left: ESTree.Expression, right: ESTree.Expression, execContext: TExecutionContext) => IterableIterator<[ExpressionEvaluationResult, TExecutionContext]>;
export declare function plus(left: Any, right: Any): any;
export declare function minus(left: Any, right: Any): any;
export declare function greaterThan(left: Any, right: Any): boolean;
export declare function exactEquality(left: Any, right: Any): any;
export declare function notExactEquality(left: Any, right: Any): any;
export declare const logicalAnd: any;
export declare const logicalOr: any;
export declare const equal: any;
export declare const notEqual: any;
export declare const not: any;
export declare const typeOf: any;
export declare const unaryMinus: any;
export declare const unaryVoid: any;
export declare const BinaryOperatorResolvers: Map<string, BinaryOperatorResolver>;
export declare const LogicalOperatorResolvers: Map<string, LogicalOperatorResolver>;
export declare const UnaryOperatorResolvers: Map<string, UnaryOperatorResolver>;
//# sourceMappingURL=operators.d.ts.map